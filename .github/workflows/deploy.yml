name: Deploy Backend to Google Cloud Run

on:
  push:
    branches: [main, develop]
    paths:
      - 'Backend/**'
      - 'docker/Dockerfile'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'Backend/**'
      - 'docker/Dockerfile'
  workflow_dispatch: # Allow manual trigger

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1 # Google Artifact Registry location
  SERVICE: therapyapp-backend
  REGION: us-central1 # Cloud Run region

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('Backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd Backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Run tests
        run: |
          cd Backend
          # Run basic import tests
          python -c "from main import app; print('FastAPI app imported successfully')"
          python -c "from core.genkit_gemini import generate_followup_question, summarize_text_flow; print('AI functions imported successfully')"
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Create Artifact Registry repository (if needed)
        run: |
          gcloud artifacts repositories create ${{ env.SERVICE }} \
            --repository-format=docker \
            --location=${{ env.GAR_LOCATION }} \
            --description="Therapy app backend repository" || true

      - name: Build and push Docker image
        run: |
          # Build image
          docker build -f docker/Dockerfile \
            -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }} \
            -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:latest .
          
          # Push image
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:latest

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}
          env_vars: |
            ENVIRONMENT=${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
          secrets: |
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}:latest
            GOOGLE_APPLICATION_CREDENTIALS=/secrets/gcp-credentials:latest
          flags: |
            --allow-unauthenticated
            --port=8080
            --memory=1Gi
            --cpu=1
            --min-instances=0
            --max-instances=10
            --concurrency=100
            --timeout=300
            --service-account=${{ secrets.CLOUD_RUN_SERVICE_ACCOUNT }}

      - name: Show service URL
        run: |
          echo "Deployment completed!"
          echo "Service URL: ${{ steps.deploy.outputs.url }}"
          echo "Health check: ${{ steps.deploy.outputs.url }}/docs"

  notification:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi